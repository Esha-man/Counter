{"version":3,"sources":["components/Display.tsx","components/Button.tsx","components/DisplayWithInputs.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Display","props","className","num","maxInputValue","Button","incDis","resetDis","setDis","disabled","startInputValue","valueDisplay","title","onClick","click","DisplayWidthInputs","errorStyle","borderColor","backgroundColor","type","style","onChange","getMaxInputValue","value","getStartInputValue","App","useState","setvalueDisplay","setStartInputValue","setMaxInputValue","useEffect","strVD","localStorage","getItem","JSON","parse","strSI","strMI","setItem","stringify","e","number","Number","currentTarget","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1be38778.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ntype DisplayType = {\r\n    num: number | \"Incorrect value!\"\r\n    maxInputValue: number\r\n\r\n}\r\n\r\n\r\n\r\nexport const Display = (props: DisplayType) => {\r\n\r\n    return (\r\n        <div className={\"display\"}>\r\n            <div className={(props.num === props.maxInputValue || props.num === \"Incorrect value!\") ? \"red\" : \"aliceblue\"}>\r\n                {props.num}\r\n\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}","import React from \"react\";\r\n\r\ntype OneButtonType = {\r\n    title: string\r\n    click: () => void\r\n    num: number\r\n    maxInputValue: number\r\n    valueDisplay?: string\r\n    startInputValue: number\r\n    \r\n}\r\n\r\n\r\nexport const Button = (props: OneButtonType) => {\r\n\r\n    let incDis: boolean = props.num >= props.maxInputValue || props.num < 0 ? true : false\r\n\r\n    const resetDis = props.num === 0 ? true : false\r\n\r\n    let setDis = props.num >= props.maxInputValue || props.num < 0 ? true : false\r\n\r\n\r\n    const disabledButton = () => {\r\n       \r\n        if (props.startInputValue >= props.maxInputValue) return true\r\n        if (props.startInputValue < 0) return true\r\n        if (props.valueDisplay === \"Enter values and press 'set'\") return true\r\n        \r\n      if (props.title === \"inc\") {\r\n         return incDis\r\n      } else if (props.title === \"reset\") {\r\n          return resetDis\r\n      } else if (props.title === \"set\") {\r\n          return setDis\r\n        }\r\n    \r\n    }\r\n    \r\n    return (\r\n\r\n        // <button disabled={props.title === \"inc\" ? incDis : resetDis} onClick={props.click}>{props.title}</button>\r\n        <button  disabled={disabledButton()} onClick={props.click}>{props.title}</button>\r\n\r\n    )\r\n}","import React, { ChangeEvent } from \"react\";\r\n\r\ntype DisplayType = {\r\n    maxInputValue: number\r\n    startInputValue: number\r\n    getMaxInputValue: (e: ChangeEvent<HTMLInputElement>) => void\r\n    getStartInputValue: (e: ChangeEvent<HTMLInputElement>) => void\r\n\r\n}\r\n\r\n\r\nexport const DisplayWidthInputs = (props: DisplayType) => {\r\n\r\n    const errorStyle = () => {\r\n        if (props.startInputValue >= props.maxInputValue || props.startInputValue < 0) {\r\n            return { borderColor: \"red\", backgroundColor: \"red\" }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={\"display\"}>\r\n            <div>\r\n                <span className={\"inputSpan\"}>Max value:\r\n                    <input type={\"number\"}\r\n                        className={\"inputs\"}\r\n                        style={errorStyle()}\r\n                        onChange={props.getMaxInputValue}\r\n                        value={props.maxInputValue}\r\n                    /></span>\r\n\r\n                <span className={\"inputSpan\"}>Start value:\r\n                    <input type={\"number\"}\r\n                        className={\"inputs\"}\r\n                        style={errorStyle()}\r\n                        onChange={props.getStartInputValue}\r\n                        value={props.startInputValue}\r\n                    /></span>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n\r\n\r\n}","import React, { ChangeEvent, useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport { Display } from \"./components/Display\";\r\nimport { Button } from \"./components/Button\";\r\nimport { DisplayWidthInputs } from \"./components/DisplayWithInputs\";\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n    let [valueDisplay, setvalueDisplay] = useState<any>(\"Enter values and press 'set'\")\r\n    const [startInputValue, setStartInputValue] = useState<number>( 0 )\r\n    const [maxInputValue, setMaxInputValue] = useState<number>(0)\r\n\r\n    //--------- отправка значения в инпуты --------------// \r\n    //start inp\r\n    const getStartInputValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let value = Number(e.currentTarget.value)\r\n        if (value < 0 || value >= maxInputValue) {\r\n            setStartInputValue(value)\r\n            setvalueDisplay(\"Incorrect value!\")\r\n        } else if (value >= 0) {\r\n            setStartInputValue(value)\r\n            setvalueDisplay(\"Enter values and press 'set'\")\r\n        }\r\n    }\r\n    //max inp\r\n    const getMaxInputValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const number = Number(e.currentTarget.value)\r\n        setMaxInputValue(number)\r\n    }\r\n   \r\n\r\n    //---------колбеки кнопок----------------------//\r\n\r\n    const addClickStartInputValueToDisplay = () => {\r\n        setvalueDisplay(startInputValue)\r\n    }\r\n\r\n    const increment = () => {\r\n        setvalueDisplay(valueDisplay + 1)\r\n    }\r\n    //--------------- localeStorage -------------//\r\n    // const [value, setValue] = useState<any>(0)\r\n\r\n    useEffect(() => {\r\n        let strVD = localStorage.getItem(\"valueDisplay\")\r\n        if (strVD) {\r\n            setvalueDisplay(JSON.parse(strVD))\r\n        }\r\n    }, [])\r\n    useEffect(() => {\r\n        let strSI = localStorage.getItem(\"startInputValue\")\r\n        if (strSI) {\r\n            let num = JSON.parse(strSI)\r\n            setStartInputValue(num)\r\n        }\r\n    }, [])\r\n    useEffect(() => {\r\n        let strMI = localStorage.getItem(\"maxInputValue\")\r\n        if (strMI) {\r\n            let num = JSON.parse(strMI)\r\n            setMaxInputValue(num)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"valueDisplay\", JSON.stringify(valueDisplay))\r\n    }, [valueDisplay])\r\n    useEffect(() => {\r\n        localStorage.setItem(\"startInputValue\", JSON.stringify(startInputValue))\r\n    }, [startInputValue])\r\n    useEffect(() => {\r\n        localStorage.setItem(\"maxInputValue\", JSON.stringify(maxInputValue))\r\n    }, [maxInputValue])\r\n\r\n \r\n\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            <div className={\"counter\"}>\r\n                <DisplayWidthInputs\r\n                    maxInputValue={maxInputValue}\r\n                    startInputValue={startInputValue}\r\n                    getMaxInputValue={getMaxInputValue}\r\n                    getStartInputValue={getStartInputValue}\r\n                />\r\n                <div className={\"buttons_area\"}>\r\n                    <Button title={\"set\"}\r\n                        click={addClickStartInputValueToDisplay}\r\n                        num={startInputValue}\r\n                        maxInputValue={maxInputValue}\r\n                        startInputValue={startInputValue}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <div className={\"counter\"}>\r\n                <Display num={valueDisplay}\r\n                    maxInputValue={maxInputValue}\r\n                />\r\n                <div className={\"buttons_area\"}>\r\n                    <Button click={increment}\r\n                        title={\"inc\"}\r\n                        num={valueDisplay}\r\n                        maxInputValue={maxInputValue}\r\n                        valueDisplay={valueDisplay}\r\n                        startInputValue={startInputValue} />\r\n                    <Button title={\"reset\"}\r\n                        click={() => setvalueDisplay(0)}\r\n                        num={valueDisplay}\r\n                        maxInputValue={maxInputValue}\r\n                        valueDisplay={valueDisplay}\r\n                        startInputValue={startInputValue} />\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}